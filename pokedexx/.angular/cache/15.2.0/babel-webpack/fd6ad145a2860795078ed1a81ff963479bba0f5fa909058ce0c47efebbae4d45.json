{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar after = require(\"lodash/after\");\nvar factory_1 = require(\"./factory\");\nvar applicators_1 = require(\"./applicators\");\nvar decorator = factory_1.DecoratorFactory.createDecorator(new factory_1.DecoratorConfig(after, new applicators_1.PostValueApplicator(), {\n  setter: true\n}));\n/**\n * The opposite of Before. This method creates a function that invokes once it's called n or more times.\n * This spans across all instances of the class instead of the instance.\n * @param {number} n The number of calls before the function is invoked.\n * @example\n *\n * class MyClass {\n *   @AfterAll(2)\n *   fn() {\n *     return 10;\n *   }\n * }\n *\n * const myClass = new MyClass();\n * const myClass2 = new MyClass();\n *\n * myClass.fn(); // => undefined\n * myClass.fn(); // => 10\n *\n * myClass2.fn(); // => 10\n * myClass2.fn(); // => 10\n */\nfunction AfterAll(n) {\n  return decorator(n);\n}\nexports.AfterAll = AfterAll;\nexports.afterAll = AfterAll;\nexports.default = decorator;","map":{"version":3,"names":["Object","defineProperty","exports","value","after","require","factory_1","applicators_1","decorator","DecoratorFactory","createDecorator","DecoratorConfig","PostValueApplicator","setter","AfterAll","n","afterAll","default"],"sources":["/home/kalidevi/Documents/GitHub/AngularPractice/pokedexx/node_modules/lodash-decorators/afterAll.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar after = require(\"lodash/after\");\nvar factory_1 = require(\"./factory\");\nvar applicators_1 = require(\"./applicators\");\nvar decorator = factory_1.DecoratorFactory.createDecorator(new factory_1.DecoratorConfig(after, new applicators_1.PostValueApplicator(), { setter: true }));\n/**\n * The opposite of Before. This method creates a function that invokes once it's called n or more times.\n * This spans across all instances of the class instead of the instance.\n * @param {number} n The number of calls before the function is invoked.\n * @example\n *\n * class MyClass {\n *   @AfterAll(2)\n *   fn() {\n *     return 10;\n *   }\n * }\n *\n * const myClass = new MyClass();\n * const myClass2 = new MyClass();\n *\n * myClass.fn(); // => undefined\n * myClass.fn(); // => 10\n *\n * myClass2.fn(); // => 10\n * myClass2.fn(); // => 10\n */\nfunction AfterAll(n) {\n    return decorator(n);\n}\nexports.AfterAll = AfterAll;\nexports.afterAll = AfterAll;\nexports.default = decorator;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,KAAK,GAAGC,OAAO,CAAC,cAAc,CAAC;AACnC,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIE,aAAa,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC5C,IAAIG,SAAS,GAAGF,SAAS,CAACG,gBAAgB,CAACC,eAAe,CAAC,IAAIJ,SAAS,CAACK,eAAe,CAACP,KAAK,EAAE,IAAIG,aAAa,CAACK,mBAAmB,EAAE,EAAE;EAAEC,MAAM,EAAE;AAAK,CAAC,CAAC,CAAC;AAC3J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQ,CAACC,CAAC,EAAE;EACjB,OAAOP,SAAS,CAACO,CAAC,CAAC;AACvB;AACAb,OAAO,CAACY,QAAQ,GAAGA,QAAQ;AAC3BZ,OAAO,CAACc,QAAQ,GAAGF,QAAQ;AAC3BZ,OAAO,CAACe,OAAO,GAAGT,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}