{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar isFunction = require(\"lodash/isFunction\");\nvar isString = require(\"lodash/isString\");\nvar log_1 = require(\"./log\");\n/**\n  * Resolves a function on the current target object. It first will\n  * try and resolve on the context object, then the target object,\n  * then an error will be thrown if the method can not be resolved.\n  * @private\n  * @param {Function|string} method The method or method name.\n  * @param {Object} [context] The context object to resolve from.\n  * @param {Object} [target] The target object to resolve from.\n  * @returns {Function} The resolved function.\n  */\nfunction resolveFunction(method, context, target, throwNotFound) {\n  if (throwNotFound === void 0) {\n    throwNotFound = true;\n  }\n  if (isFunction(method)) {\n    return method;\n  } else if (isString(method)) {\n    if (context && isFunction(context[method])) {\n      return context[method];\n    } else if (target && isFunction(target[method])) {\n      return target[method];\n    }\n  }\n  if (throwNotFound) {\n    throw new ReferenceError(log_1.log(\"Can not resolve method \" + method + \" on any target Objects\"));\n  }\n}\nexports.resolveFunction = resolveFunction;","map":{"version":3,"names":["Object","defineProperty","exports","value","isFunction","require","isString","log_1","resolveFunction","method","context","target","throwNotFound","ReferenceError","log"],"sources":["/home/kalidevi/Documents/GitHub/AngularPractice/pokedexx/node_modules/lodash-decorators/utils/resolveFunction.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isFunction = require(\"lodash/isFunction\");\nvar isString = require(\"lodash/isString\");\nvar log_1 = require(\"./log\");\n/**\n  * Resolves a function on the current target object. It first will\n  * try and resolve on the context object, then the target object,\n  * then an error will be thrown if the method can not be resolved.\n  * @private\n  * @param {Function|string} method The method or method name.\n  * @param {Object} [context] The context object to resolve from.\n  * @param {Object} [target] The target object to resolve from.\n  * @returns {Function} The resolved function.\n  */\nfunction resolveFunction(method, context, target, throwNotFound) {\n    if (throwNotFound === void 0) { throwNotFound = true; }\n    if (isFunction(method)) {\n        return method;\n    }\n    else if (isString(method)) {\n        if (context && isFunction(context[method])) {\n            return context[method];\n        }\n        else if (target && isFunction(target[method])) {\n            return target[method];\n        }\n    }\n    if (throwNotFound) {\n        throw new ReferenceError(log_1.log(\"Can not resolve method \" + method + \" on any target Objects\"));\n    }\n}\nexports.resolveFunction = resolveFunction;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,UAAU,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC7C,IAAIC,QAAQ,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AACzC,IAAIE,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,eAAe,CAACC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,aAAa,EAAE;EAC7D,IAAIA,aAAa,KAAK,KAAK,CAAC,EAAE;IAAEA,aAAa,GAAG,IAAI;EAAE;EACtD,IAAIR,UAAU,CAACK,MAAM,CAAC,EAAE;IACpB,OAAOA,MAAM;EACjB,CAAC,MACI,IAAIH,QAAQ,CAACG,MAAM,CAAC,EAAE;IACvB,IAAIC,OAAO,IAAIN,UAAU,CAACM,OAAO,CAACD,MAAM,CAAC,CAAC,EAAE;MACxC,OAAOC,OAAO,CAACD,MAAM,CAAC;IAC1B,CAAC,MACI,IAAIE,MAAM,IAAIP,UAAU,CAACO,MAAM,CAACF,MAAM,CAAC,CAAC,EAAE;MAC3C,OAAOE,MAAM,CAACF,MAAM,CAAC;IACzB;EACJ;EACA,IAAIG,aAAa,EAAE;IACf,MAAM,IAAIC,cAAc,CAACN,KAAK,CAACO,GAAG,CAAC,yBAAyB,GAAGL,MAAM,GAAG,wBAAwB,CAAC,CAAC;EACtG;AACJ;AACAP,OAAO,CAACM,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}